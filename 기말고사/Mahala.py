Python 3.9.4 (tags/v3.9.4:1f2e308, Apr  6 2021, 13:40:21) [MSC v.1928 64 bit (AMD64)] on win32
Type "help", "copyright", "credits" or "license()" for more information.
>>> pip list
SyntaxError: invalid syntax
>>> import cv2
>>> import numpy as np
>>> X = np.array([[0, 0, 0, 100, 100, 150, -100, -150],
	      [0, 50, -50, 0, 30, 100, -20, -100]], dtype=np.float64)
>>> X = X.T
>>> cov, mean = cv2.calcCovarMatrix(X, None, cv2.COVAR_NORMAL+cv2.COVAR_ROWS)
>>> _, icov = cv2.invert(cov)
>>> v1 = np.array([[0],[0]], dtype=np.float64)
>>> v2 = np.array([[0], [50]], dtype=np.float64)
>>> dist = cv2.Mahalanobis(v1, v2, icov)
>>> print(dist)
0.5051854992128457
>>> print(cov)
[[73750.  34875. ]
 [34875.  26287.5]]
>>> print(mean
      )
[[12.5   1.25]]
>>> # 2
>>> import cv2
>>> import numpy as np
>>> cov, mean = cv2.calcCovarMatrix(X, None, cv2.COVAR_NORMAL+cv2.COVAR_ROWS)
>>> print(cov)
[[73750.  34875. ]
 [34875.  26287.5]]
>>> print(mean
      )
[[12.5   1.25]]
>>> ret, icov = cv2.invert(cov)
>>> dst = np.full((512, 512, 3
	       ), (255, 255, 255), dtype=np-.uint8)
SyntaxError: invalid syntax
>>> dst = np.full((512, 512, 3
	       ), (255, 255, 255), dtype=np.uint8)
>>> rows, cols, channel = dst.shape
>>> print(rows, cols, channel)
512 512 3
>>> centerX = rows // 2
>>> centerY = cols // 2
>>> print(centerX, centerY)
256 256
>>> v2 = np.zeros((1, 2), dtype=np.float64)
>>> FLIP_Y = lambda y: rows -1 -y
>>> for y in range(rows):
	for x in range(cols):
		v2[0, 0] = x - centerX
		v2[0, 1] = FLIP_Y(y) - centerY
		dist=cv2.Mahalanobis(mean, v2, icov)
		if dist <0.1:
			dst[y, x] = [50, 50, 50]

			
>>> for y in range(rows):
	for x in range(cols):
		v2[0, 0] = x - centerX
		v2[0, 1] = FLIP_Y(y) - centerY
		dist=cv2.Mahalanobis(mean, v2, icov)
		if dist <0.1:
			dst[y, x] = [50, 50, 50]

			
>>> for y in range(rows):
	for x in range(cols):
		v2[0, 0] = x - centerX
		v2[0, 1] = FLIP_Y(y) - centerY
		dist=cv2.Mahalanobis(mean, v2, icov)
		if dist <0.1:
			dst[y, x] = [50, 50, 50]

			
>>> for y in range(rows):
	for x in range(cols):
		v2[0, 0] = x - centerX
		v2[0, 1] = FLIP_Y(y) - centerY
		dist=cv2.Mahalanobis(mean, v2, icov)
		if dist <0.1:
			dst[y, x] = [50, 50, 50]
		elif dist <0.3:
			dst[y, x] = [100, 100, 100]
		elif dist < 0.8:
			dst[y,x] = [200, 200, 200]
		else:
			dst[y, x] = [250, 250, 250]

			
>>> for k in range(X.shape[0]):
	x, y = X[k, :]
	cx = int(x+centerX)
	cy = int(y+centerY)
	cy = FLIP_Y(cy)
	cv2.circle(dst, (cx, cy), 5, (0, 0, 255), -1)

	
array([[[250, 250, 250],
        [250, 250, 250],
        [250, 250, 250],
        ...,
        [250, 250, 250],
        [250, 250, 250],
        [250, 250, 250]],

       [[250, 250, 250],
        [250, 250, 250],
        [250, 250, 250],
        ...,
        [250, 250, 250],
        [250, 250, 250],
        [250, 250, 250]],

       [[250, 250, 250],
        [250, 250, 250],
        [250, 250, 250],
        ...,
        [250, 250, 250],
        [250, 250, 250],
        [250, 250, 250]],

       ...,

       [[250, 250, 250],
        [250, 250, 250],
        [250, 250, 250],
        ...,
        [250, 250, 250],
        [250, 250, 250],
        [250, 250, 250]],

       [[250, 250, 250],
        [250, 250, 250],
        [250, 250, 250],
        ...,
        [250, 250, 250],
        [250, 250, 250],
        [250, 250, 250]],

       [[250, 250, 250],
        [250, 250, 250],
        [250, 250, 250],
        ...,
        [250, 250, 250],
        [250, 250, 250],
        [250, 250, 250]]], dtype=uint8)
array([[[250, 250, 250],
        [250, 250, 250],
        [250, 250, 250],
        ...,
        [250, 250, 250],
        [250, 250, 250],
        [250, 250, 250]],

       [[250, 250, 250],
        [250, 250, 250],
        [250, 250, 250],
        ...,
        [250, 250, 250],
        [250, 250, 250],
        [250, 250, 250]],

       [[250, 250, 250],
        [250, 250, 250],
        [250, 250, 250],
        ...,
        [250, 250, 250],
        [250, 250, 250],
        [250, 250, 250]],

       ...,

       [[250, 250, 250],
        [250, 250, 250],
        [250, 250, 250],
        ...,
        [250, 250, 250],
        [250, 250, 250],
        [250, 250, 250]],

       [[250, 250, 250],
        [250, 250, 250],
        [250, 250, 250],
        ...,
        [250, 250, 250],
        [250, 250, 250],
        [250, 250, 250]],

       [[250, 250, 250],
        [250, 250, 250],
        [250, 250, 250],
        ...,
        [250, 250, 250],
        [250, 250, 250],
        [250, 250, 250]]], dtype=uint8)
array([[[250, 250, 250],
        [250, 250, 250],
        [250, 250, 250],
        ...,
        [250, 250, 250],
        [250, 250, 250],
        [250, 250, 250]],

       [[250, 250, 250],
        [250, 250, 250],
        [250, 250, 250],
        ...,
        [250, 250, 250],
        [250, 250, 250],
        [250, 250, 250]],

       [[250, 250, 250],
        [250, 250, 250],
        [250, 250, 250],
        ...,
        [250, 250, 250],
        [250, 250, 250],
        [250, 250, 250]],

       ...,

       [[250, 250, 250],
        [250, 250, 250],
        [250, 250, 250],
        ...,
        [250, 250, 250],
        [250, 250, 250],
        [250, 250, 250]],

       [[250, 250, 250],
        [250, 250, 250],
        [250, 250, 250],
        ...,
        [250, 250, 250],
        [250, 250, 250],
        [250, 250, 250]],

       [[250, 250, 250],
        [250, 250, 250],
        [250, 250, 250],
        ...,
        [250, 250, 250],
        [250, 250, 250],
        [250, 250, 250]]], dtype=uint8)
array([[[250, 250, 250],
        [250, 250, 250],
        [250, 250, 250],
        ...,
        [250, 250, 250],
        [250, 250, 250],
        [250, 250, 250]],

       [[250, 250, 250],
        [250, 250, 250],
        [250, 250, 250],
        ...,
        [250, 250, 250],
        [250, 250, 250],
        [250, 250, 250]],

       [[250, 250, 250],
        [250, 250, 250],
        [250, 250, 250],
        ...,
        [250, 250, 250],
        [250, 250, 250],
        [250, 250, 250]],

       ...,

       [[250, 250, 250],
        [250, 250, 250],
        [250, 250, 250],
        ...,
        [250, 250, 250],
        [250, 250, 250],
        [250, 250, 250]],

       [[250, 250, 250],
        [250, 250, 250],
        [250, 250, 250],
        ...,
        [250, 250, 250],
        [250, 250, 250],
        [250, 250, 250]],

       [[250, 250, 250],
        [250, 250, 250],
        [250, 250, 250],
        ...,
        [250, 250, 250],
        [250, 250, 250],
        [250, 250, 250]]], dtype=uint8)
array([[[250, 250, 250],
        [250, 250, 250],
        [250, 250, 250],
        ...,
        [250, 250, 250],
        [250, 250, 250],
        [250, 250, 250]],

       [[250, 250, 250],
        [250, 250, 250],
        [250, 250, 250],
        ...,
        [250, 250, 250],
        [250, 250, 250],
        [250, 250, 250]],

       [[250, 250, 250],
        [250, 250, 250],
        [250, 250, 250],
        ...,
        [250, 250, 250],
        [250, 250, 250],
        [250, 250, 250]],

       ...,

       [[250, 250, 250],
        [250, 250, 250],
        [250, 250, 250],
        ...,
        [250, 250, 250],
        [250, 250, 250],
        [250, 250, 250]],

       [[250, 250, 250],
        [250, 250, 250],
        [250, 250, 250],
        ...,
        [250, 250, 250],
        [250, 250, 250],
        [250, 250, 250]],

       [[250, 250, 250],
        [250, 250, 250],
        [250, 250, 250],
        ...,
        [250, 250, 250],
        [250, 250, 250],
        [250, 250, 250]]], dtype=uint8)
array([[[250, 250, 250],
        [250, 250, 250],
        [250, 250, 250],
        ...,
        [250, 250, 250],
        [250, 250, 250],
        [250, 250, 250]],

       [[250, 250, 250],
        [250, 250, 250],
        [250, 250, 250],
        ...,
        [250, 250, 250],
        [250, 250, 250],
        [250, 250, 250]],

       [[250, 250, 250],
        [250, 250, 250],
        [250, 250, 250],
        ...,
        [250, 250, 250],
        [250, 250, 250],
        [250, 250, 250]],

       ...,

       [[250, 250, 250],
        [250, 250, 250],
        [250, 250, 250],
        ...,
        [250, 250, 250],
        [250, 250, 250],
        [250, 250, 250]],

       [[250, 250, 250],
        [250, 250, 250],
        [250, 250, 250],
        ...,
        [250, 250, 250],
        [250, 250, 250],
        [250, 250, 250]],

       [[250, 250, 250],
        [250, 250, 250],
        [250, 250, 250],
        ...,
        [250, 250, 250],
        [250, 250, 250],
        [250, 250, 250]]], dtype=uint8)
array([[[250, 250, 250],
        [250, 250, 250],
        [250, 250, 250],
        ...,
        [250, 250, 250],
        [250, 250, 250],
        [250, 250, 250]],

       [[250, 250, 250],
        [250, 250, 250],
        [250, 250, 250],
        ...,
        [250, 250, 250],
        [250, 250, 250],
        [250, 250, 250]],

       [[250, 250, 250],
        [250, 250, 250],
        [250, 250, 250],
        ...,
        [250, 250, 250],
        [250, 250, 250],
        [250, 250, 250]],

       ...,

       [[250, 250, 250],
        [250, 250, 250],
        [250, 250, 250],
        ...,
        [250, 250, 250],
        [250, 250, 250],
        [250, 250, 250]],

       [[250, 250, 250],
        [250, 250, 250],
        [250, 250, 250],
        ...,
        [250, 250, 250],
        [250, 250, 250],
        [250, 250, 250]],

       [[250, 250, 250],
        [250, 250, 250],
        [250, 250, 250],
        ...,
        [250, 250, 250],
        [250, 250, 250],
        [250, 250, 250]]], dtype=uint8)
array([[[250, 250, 250],
        [250, 250, 250],
        [250, 250, 250],
        ...,
        [250, 250, 250],
        [250, 250, 250],
        [250, 250, 250]],

       [[250, 250, 250],
        [250, 250, 250],
        [250, 250, 250],
        ...,
        [250, 250, 250],
        [250, 250, 250],
        [250, 250, 250]],

       [[250, 250, 250],
        [250, 250, 250],
        [250, 250, 250],
        ...,
        [250, 250, 250],
        [250, 250, 250],
        [250, 250, 250]],

       ...,

       [[250, 250, 250],
        [250, 250, 250],
        [250, 250, 250],
        ...,
        [250, 250, 250],
        [250, 250, 250],
        [250, 250, 250]],

       [[250, 250, 250],
        [250, 250, 250],
        [250, 250, 250],
        ...,
        [250, 250, 250],
        [250, 250, 250],
        [250, 250, 250]],

       [[250, 250, 250],
        [250, 250, 250],
        [250, 250, 250],
        ...,
        [250, 250, 250],
        [250, 250, 250],
        [250, 250, 250]]], dtype=uint8)
>>> cv2.line(dst, (0, 256), (cols-1, 256), (0, 0, 0))
array([[[250, 250, 250],
        [250, 250, 250],
        [250, 250, 250],
        ...,
        [250, 250, 250],
        [250, 250, 250],
        [250, 250, 250]],

       [[250, 250, 250],
        [250, 250, 250],
        [250, 250, 250],
        ...,
        [250, 250, 250],
        [250, 250, 250],
        [250, 250, 250]],

       [[250, 250, 250],
        [250, 250, 250],
        [250, 250, 250],
        ...,
        [250, 250, 250],
        [250, 250, 250],
        [250, 250, 250]],

       ...,

       [[250, 250, 250],
        [250, 250, 250],
        [250, 250, 250],
        ...,
        [250, 250, 250],
        [250, 250, 250],
        [250, 250, 250]],

       [[250, 250, 250],
        [250, 250, 250],
        [250, 250, 250],
        ...,
        [250, 250, 250],
        [250, 250, 250],
        [250, 250, 250]],

       [[250, 250, 250],
        [250, 250, 250],
        [250, 250, 250],
        ...,
        [250, 250, 250],
        [250, 250, 250],
        [250, 250, 250]]], dtype=uint8)
>>> cv2.line(dst, (256, 0), (256, rows), (0, 0, 0))
array([[[250, 250, 250],
        [250, 250, 250],
        [250, 250, 250],
        ...,
        [250, 250, 250],
        [250, 250, 250],
        [250, 250, 250]],

       [[250, 250, 250],
        [250, 250, 250],
        [250, 250, 250],
        ...,
        [250, 250, 250],
        [250, 250, 250],
        [250, 250, 250]],

       [[250, 250, 250],
        [250, 250, 250],
        [250, 250, 250],
        ...,
        [250, 250, 250],
        [250, 250, 250],
        [250, 250, 250]],

       ...,

       [[250, 250, 250],
        [250, 250, 250],
        [250, 250, 250],
        ...,
        [250, 250, 250],
        [250, 250, 250],
        [250, 250, 250]],

       [[250, 250, 250],
        [250, 250, 250],
        [250, 250, 250],
        ...,
        [250, 250, 250],
        [250, 250, 250],
        [250, 250, 250]],

       [[250, 250, 250],
        [250, 250, 250],
        [250, 250, 250],
        ...,
        [250, 250, 250],
        [250, 250, 250],
        [250, 250, 250]]], dtype=uint8)
>>> ret, eVals, eVects = cv2.eigen(cov)
>>> print(eVals)
[[92202.13359547]
 [ 7835.36640453]]
>>> print(eVects)
[[ 0.88390424  0.46766793]
 [-0.46766793  0.88390424]]
>>> def ptsEigenVector(eVal, eVects):
	global mX, centerX, centerY
	scale = np.sqrt(eVal)
	x1 = scale * eVects[0]
	x2 = scale * eVects[1]
	y1 = scale * eVects[1]
	x2, y2 = -x1, -y1
	x+=mean[0,0] + centerX
	x1+=mean[0,0] + centerX
	y1+=mean[0,1] + centerX
	y1-=mean[0,1] + centerX
	y1+=mean[0,1] + centerY
	x2 += mean[0, 0]+ centerX
	y2 += mean[0,1] + centerY
	y1 = FLIP_Y(y1)
	y2 = FLIP_Y(y2)
	return int(x1), int(y1), int(x2), int(y2)

>>> x1, y1, x2, y2 = ptsEigenVector(eVals[0], eVects[0])
Traceback (most recent call last):
  File "<pyshell#83>", line 1, in <module>
    x1, y1, x2, y2 = ptsEigenVector(eVals[0], eVects[0])
  File "<pyshell#82>", line 8, in ptsEigenVector
    x+=mean[0,0] + centerX
UnboundLocalError: local variable 'x' referenced before assignment
>>> def ptsEigenVector(eVal, eVects):
	global mX, centerX, centerY
	scale = np.sqrt(eVal)
	x1 = scale * eVects[0]
	x2 = scale * eVects[1]
	y1 = scale * eVects[1]
	x2, y2 = -x1, -y1
	x1+=mean[0,0] + centerX
	y1+=mean[0,1] + centerY
	x2 += mean[0, 0]+ centerX
	y2 += mean[0,1] + centerY
	y1 = FLIP_Y(y1)
	y2 = FLIP_Y(y2)
	return int(x1), int(y1), int(x2), int(y2)

>>> x1, y1, x2, y2 = ptsEigenVector(eVals[0], eVects[0])
>>> cv2.line(dst, (x1, y1), (x2, y2), (255, 0, 0), 2)
array([[[250, 250, 250],
        [250, 250, 250],
        [250, 250, 250],
        ...,
        [250, 250, 250],
        [250, 250, 250],
        [250, 250, 250]],

       [[250, 250, 250],
        [250, 250, 250],
        [250, 250, 250],
        ...,
        [250, 250, 250],
        [250, 250, 250],
        [250, 250, 250]],

       [[250, 250, 250],
        [250, 250, 250],
        [250, 250, 250],
        ...,
        [250, 250, 250],
        [250, 250, 250],
        [250, 250, 250]],

       ...,

       [[250, 250, 250],
        [250, 250, 250],
        [250, 250, 250],
        ...,
        [250, 250, 250],
        [250, 250, 250],
        [250, 250, 250]],

       [[250, 250, 250],
        [250, 250, 250],
        [250, 250, 250],
        ...,
        [250, 250, 250],
        [250, 250, 250],
        [250, 250, 250]],

       [[250, 250, 250],
        [250, 250, 250],
        [250, 250, 250],
        ...,
        [250, 250, 250],
        [250, 250, 250],
        [250, 250, 250]]], dtype=uint8)
>>> cv2.imshow('dst', dst)
>>> x1, y1, x2, y2 = ptsEigenVector(eVals[1], eVects[1])
>>> cv2.line(dst, (x1, y1), (x2, y2), (255, 0, 0), 2)
array([[[250, 250, 250],
        [250, 250, 250],
        [250, 250, 250],
        ...,
        [250, 250, 250],
        [250, 250, 250],
        [250, 250, 250]],

       [[250, 250, 250],
        [250, 250, 250],
        [250, 250, 250],
        ...,
        [250, 250, 250],
        [250, 250, 250],
        [250, 250, 250]],

       [[250, 250, 250],
        [250, 250, 250],
        [250, 250, 250],
        ...,
        [250, 250, 250],
        [250, 250, 250],
        [250, 250, 250]],

       ...,

       [[250, 250, 250],
        [250, 250, 250],
        [250, 250, 250],
        ...,
        [250, 250, 250],
        [250, 250, 250],
        [250, 250, 250]],

       [[250, 250, 250],
        [250, 250, 250],
        [250, 250, 250],
        ...,
        [250, 250, 250],
        [250, 250, 250],
        [250, 250, 250]],

       [[250, 250, 250],
        [250, 250, 250],
        [250, 250, 250],
        ...,
        [250, 250, 250],
        [250, 250, 250],
        [250, 250, 250]]], dtype=uint8)
>>> cv2.imshow('dst', dst)
>>> 